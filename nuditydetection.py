# -*- coding: utf-8 -*-
"""NudityDetection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xmAwX68jujTSox2m49w3YKEFhOVciqX-
"""

#from google.colab import drive
#drive.mount('/content/drive')

"""IMAGE CLASSIFICATION - CNN MODEL"""

!pip install pillow
!KERAS_BACKEND=tensorflow python -c "from keras import backend"

from __future__ import print_function
import os
import numpy as np
from keras.models import Sequential
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Convolution2D, MaxPooling2D, ZeroPadding2D
from keras import optimizers
import urllib.request
import random
import cv2
import numpy as np

img_width, img_height = 150, 150

train_data_dir = '/content/drive/My Drive/dbNudeDetection/train'
validation_data_dir = '/content/drive/My Drive/dbNudeDetection/validation'

datagen = ImageDataGenerator(rescale=1./255)

train_generator = datagen.flow_from_directory(
        train_data_dir,
        target_size=(img_width, img_height),
        batch_size=16,
        class_mode='binary')

validation_generator = datagen.flow_from_directory(
        validation_data_dir,
        target_size=(img_width, img_height),
        batch_size=32,
        class_mode='binary')

model = Sequential()
model.add(Convolution2D(32, 3, 3, input_shape=(img_width, img_height,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(32, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))


model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

nb_epoch = 20
nb_train_samples = 1941
nb_validation_samples = 50

model.fit_generator(
        train_generator,
        samples_per_epoch=nb_train_samples,
        nb_epoch=nb_epoch,
        validation_data=validation_generator,
        nb_val_samples=nb_validation_samples)

model.save("NudityDetection.h5")

model.save_weights('/content/drive/My Drive/nudity_cnn_30_epochs.h5')

model.evaluate_generator(validation_generator, nb_validation_samples)

model.load_weights('/content/drive/My Drive/nudity_cnn_30_epochs.h5')

train_datagen_augmented = ImageDataGenerator(
        rescale=1./255,        # normalize pixel values to [0,1]
        shear_range=0.2,       # randomly applies shearing transformation
        zoom_range=0.4,        # randomly applies shearing transformation
        horizontal_flip=True)

train_generator_augmented = train_datagen_augmented.flow_from_directory(
        train_data_dir,
        target_size=(img_width, img_height),
        batch_size=32,
        class_mode='binary')

model.fit_generator(
        train_generator_augmented,
        samples_per_epoch=nb_train_samples,
        nb_epoch=nb_epoch,
        validation_data=validation_generator,
        nb_val_samples=nb_validation_samples)

model.save_weights('/content/drive/My Drive/nudity_augmented_30_epochs.h5')

model.evaluate_generator(validation_generator, nb_validation_samples)

#from keras.models import load_model

def predict_nudity:
  model.load_weights('/content/drive/My Drive/nudity_augmented_30_epochs.h5')
  model.compile(loss='binary_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])
  def downloader(image_url):
    file_name = random.randrange(1,10000)
    full_file_name = str(file_name) + '.jpg'
    urllib.request.urlretrieve(image_url,full_file_name)
    img = cv2.imread(full_file_name)
    img = cv2.resize(img,(150,150))
    img = np.reshape(img,[1,150,150,3])

    prediction = model.predict(img)

    print (prediction)
    
  def file_path(image_path):
    #file_name = random.randrange(1,10000)
    #full_file_name = str(file_name) + '.jpg'
    #urllib.request.urlretrieve(image_url,full_file_name)
    img = cv2.imread(image_path)
    img = cv2.resize(img,(150,150))
    img = np.reshape(img,[1,150,150,3])
    prediction = model.predict(img)
    print (prediction)

  #downloader(input('ENTER URL : '))
  file_path(input('enter image path : '))

  #img = cv2.imread(input('ENTER IMAGE PATH :'))
  #print(img)
